inductive nat : top =>
| zero
| succ(pred : nat)

def nat-plus(a b : nat) : nat =>
match a with
| zero => b
| succ(?x) => succ(nat-plus(x, b))

def nat-to-number(a : nat) : number =>
match a with
| zero => 0
| succ(?x) => plus(nat-to-number(x), 1)

def one : nat => succ(zero)
def two : nat => succ(one)
def three : nat => succ(two)
def four : nat => succ(three)

def seven : nat => nat-plus(four, three)
def seven-number : number => nat-to-number(seven)